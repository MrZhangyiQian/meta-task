type Student struct {
	Id    int `gorm:"primaryKey;autoIncrement;"`
	Name  string
	Age   int
	Grade string
}


func main() {
  db, err := gorm.Open("mysql", "root:123456@(localhost)/dbname?charset=utf8mb4&parseTime=True&loc=Local")
	if err != nil {
		panic(err)
	}
	defer db.Close()
	//
	// 自动迁移
	db.AutoMigrate(&dbtest.Student{})
	su1 := dbtest.Student{
		Name:  "张三",
		Age:   20,
		Grade: "三年级",
	}
  // 编写SQL语句向 students 表中插入一条新记录，学生姓名为 "张三"，年龄为 20，年级为 "三年级"
	db.Create(&su1)
  
  //编写SQL语句查询 students 表中所有年龄大于 18 岁的学生信息
	var students []dbtest.Student
	db.Where("age > ?", 18).Find(&students)
	for _, students := range students {
		fmt.Printf("Name: %s, Age: %d, Grade: %s\n", students.Name, students.Age, students.Grade)
	}
  // 编写SQL语句将 students 表中姓名为 "张三" 的学生年级更新为 "四年级"。
	var suZhang = new(dbtest.Student)
	db.Where("name = ?", "张三").Find(&suZhang)
	fmt.Printf("Name: %s, Age: %d, Grade: %s", suZhang.Name, suZhang.Age, suZhang.Grade)
	suZhang.Grade = "四年级"
	db.Save(&suZhang)
  // 编写SQL语句删除 students 表中年龄小于 15 岁的学生记录。
	db.Where("age < ?", 15).Delete(&dbtest.Student{})
	var students []dbtest.Student
	db.Find(&students)
	for _, students := range students {
		fmt.Printf("Name: %s, Age: %d, Grade: %s\n", students.Name, students.Age, students.Grade)
	}
  }
